name: Build and Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_ID: basketball-stats-461220
  REGION: us-west1
  REPOSITORY: basketball-stats
  IMAGE: basketball-stats-app
  SERVICE_NAME: basketball-stats

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Extract version from pyproject.toml
      id: version
      run: |
        VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        # Get short hash (first 7 characters)
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "Short SHA: $SHORT_SHA"

    - name: Build Docker image
      run: |
        docker build \
          --target production \
          --build-arg APP_VERSION=${{ steps.version.outputs.VERSION }} \
          --build-arg GIT_HASH=${{ steps.version.outputs.SHORT_SHA }} \
          -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} \
          -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest \
          .

    - name: Push Docker image
      run: |
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest

    - name: Update Migration Job
      run: |
        # Delete existing migration job if it exists
        gcloud run jobs delete basketball-stats-migrate --region=${{ env.REGION }} --quiet || true
        
        # Create new migration job with latest image
        gcloud run jobs create basketball-stats-migrate \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest \
          --region ${{ env.REGION }} \
          --args="alembic,upgrade,head" \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }},APP_ENV=production" \
          --service-account=basketball-stats-run-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --max-retries=1 \
          --parallelism=1

    - name: Run Database Migration
      run: |
        echo "Running database migrations BEFORE deployment..."
        # Execute the migration
        EXECUTION_NAME=$(gcloud run jobs execute basketball-stats-migrate --region=${{ env.REGION }} --format="get(metadata.name)")
        echo "Migration execution: $EXECUTION_NAME"
        
        # Wait for completion and check status
        for i in {1..30}; do
          STATUS=$(gcloud run jobs executions describe $EXECUTION_NAME --region=${{ env.REGION }} --format="get(status.conditions[0].type)")
          if [ "$STATUS" = "Completed" ]; then
            echo "✅ Migration completed successfully - proceeding with deployment"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "❌ Migration failed - stopping deployment"
            gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=basketball-stats-migrate" --limit=10 --format="table(timestamp,severity,textPayload)" --freshness=5m
            exit 1
          fi
          echo "Waiting for migration to complete... ($i/30)"
          sleep 10
        done

    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run (migrations completed successfully)..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8000 \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          --set-env-vars="DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@10.89.16.2:5432/basketball_stats"