name: Build and Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_ID: basketball-stats-461220
  REGION: us-west1
  REPOSITORY: basketball-stats
  IMAGE: basketball-stats-app
  SERVICE_NAME: basketball-stats
  PYTHON_VERSION: "3.11"

jobs:
  # Detect what files have changed to determine if we need deployment
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      needs_deployment: ${{ steps.filter.outputs.needs_deployment }}
      needs_migration: ${{ steps.filter.outputs.needs_migration }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            needs_deployment:
              - 'app/**'
              - 'scripts/**'
              - 'migrations/**'
              - 'pyproject.toml'
              - 'Dockerfile'
              - 'alembic.ini'
            needs_migration:
              - 'migrations/**'
              - 'alembic.ini'

  validate-config:
    name: Validate Configuration
    needs: changes
    # Only run if deployment is needed
    if: needs.changes.outputs.needs_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Validate Required GCP Configuration
        run: |
          # Validate that we have the necessary service account and WIF configuration
          if [ -z "${{ secrets.WIF_PROVIDER }}" ]; then
            echo "❌ WIF_PROVIDER is not set"
            exit 1
          fi

          if [ -z "${{ secrets.WIF_SERVICE_ACCOUNT }}" ]; then
            echo "❌ WIF_SERVICE_ACCOUNT is not set"
            exit 1
          fi

          echo "✅ All required GCP configuration is present"
          echo "Note: Secrets are now managed through Google Secret Manager"

  # Run tests before deploying (only if app code changed)
  test:
    name: Quick Tests
    needs: changes
    if: needs.changes.outputs.needs_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python with cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        env:
          JWT_SECRET_KEY: test-secret-key-for-ci-environment-12345678
        run: |
          pytest tests/unit/ -v --tb=short

  # Build and deploy app
  build-and-deploy:
    needs: [validate-config, test, changes]
    # Run after tests pass and validation succeeds
    if: |
      always() &&
      needs.validate-config.result == 'success' &&
      needs.test.result == 'success' &&
      needs.changes.outputs.needs_deployment == 'true'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Extract version from pyproject.toml
      id: version
      run: |
        VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        # Get short hash (first 7 characters)
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "Short SHA: $SHORT_SHA"

    # Use Docker buildx for better caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        target: production
        build-args: |
          APP_VERSION=${{ steps.version.outputs.VERSION }}
          GIT_HASH=${{ steps.version.outputs.SHORT_SHA }}
        tags: |
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.version.outputs.VERSION }}
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Only run migrations if migration files changed
    - name: Update Migration Job
      if: needs.changes.outputs.needs_migration == 'true'
      run: |
        # Update the migration job image only, preserving Terraform-managed configuration
        # This prevents overwriting VPC settings and other critical configuration
        gcloud run jobs update basketball-stats-migrate \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.version.outputs.VERSION }} \
          --region ${{ env.REGION }} || {
          echo "Migration job doesn't exist, it should be created by Terraform"
          echo "Please run 'terraform apply' to create the migration job with proper VPC configuration"
          exit 1
        }

    - name: Run Database Migration
      if: needs.changes.outputs.needs_migration == 'true'
      run: |
        echo "Running database migrations BEFORE deployment..."
        # Execute the migration
        EXECUTION_NAME=$(gcloud run jobs execute basketball-stats-migrate --region=${{ env.REGION }} --format="get(metadata.name)")
        echo "Migration execution: $EXECUTION_NAME"

        # Wait for completion and check status
        for i in {1..30}; do
          STATUS=$(gcloud run jobs executions describe $EXECUTION_NAME --region=${{ env.REGION }} --format="get(status.conditions[0].type)")
          if [ "$STATUS" = "Completed" ]; then
            echo "✅ Migration completed successfully - proceeding with deployment"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "❌ Migration failed - stopping deployment"
            gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=basketball-stats-migrate" --limit=10 --format="table(timestamp,severity,textPayload)" --freshness=5m
            exit 1
          fi
          echo "Waiting for migration to complete... ($i/30)"
          sleep 10
        done

    - name: Update Cloud Run Image
      run: |
        echo "Updating Cloud Run service with new image (preserving Terraform-managed configuration)..."

        # Update only the container image, preserving all other Terraform-managed configuration
        # This prevents conflicts between GitHub Actions and Terraform
        gcloud run services update ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.version.outputs.VERSION }} \
          --region ${{ env.REGION }}

        echo "✅ Image updated successfully. Service configuration remains managed by Terraform."
