name: PR Validation

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Detect what files have changed to optimize job runs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      app_code: ${{ steps.filter.outputs.app_code }}
      docker: ${{ steps.filter.outputs.docker }}
      frontend: ${{ steps.filter.outputs.frontend }}
      tests: ${{ steps.filter.outputs.tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            app_code:
              - 'app/**/*.py'
              - 'pyproject.toml'
              - 'alembic.ini'
              - 'migrations/**'
              - 'scripts/**'
            docker:
              - 'Dockerfile'
              - 'docker-compose.yml'
              - '.dockerignore'
            frontend:
              - 'app/web_ui/static/**'
              - 'app/web_ui/templates/**'
              - '**/*.html'
              - '**/*.css'
              - '**/*.js'
            tests:
              - 'tests/**'

  # Build validation - only if Docker or app code changed
  docker-build:
    name: Docker Build Validation
    needs: changes
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.app_code == 'true' || needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        run: |
          VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "tags=basketball-stats:pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          target: production
          build-args: |
            APP_VERSION=${{ steps.meta.outputs.VERSION }}
            GIT_HASH=${{ steps.meta.outputs.SHORT_SHA }}
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=/tmp/image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  # Python setup composite action
  setup-python:
    name: Setup Python Environment
    needs: changes
    if: needs.changes.outputs.app_code == 'true' || needs.changes.outputs.tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python with cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install and cache dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Save Python environment
        run: |
          pip freeze > requirements-lock.txt
          tar -czf python-env.tar.gz ~/.cache/pip requirements-lock.txt

      - name: Upload Python environment
        uses: actions/upload-artifact@v4
        with:
          name: python-env
          path: python-env.tar.gz
          retention-days: 1

  # Code quality checks - only if app code changed
  code-quality:
    name: Code Quality
    needs: [changes, setup-python]
    if: needs.changes.outputs.app_code == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download Python environment
        uses: actions/download-artifact@v4
        with:
          name: python-env

      - name: Restore Python environment
        run: |
          tar -xzf python-env.tar.gz
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Ruff linter
        run: |
          echo "::group::Running Ruff linter"
          ruff check . --output-format=github
          echo "::endgroup::"

      - name: Check code formatting with Ruff
        run: |
          echo "::group::Checking code formatting"
          ruff format --check .
          echo "::endgroup::"

  # Unit tests - run for app code or test changes
  unit-tests:
    name: Unit Tests
    needs: [changes, setup-python]
    if: needs.changes.outputs.app_code == 'true' || needs.changes.outputs.tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download Python environment
        uses: actions/download-artifact@v4
        with:
          name: python-env

      - name: Restore Python environment
        run: |
          tar -xzf python-env.tar.gz
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        env:
          JWT_SECRET_KEY: test-secret-key-for-ci-environment-12345678
          DATABASE_URL: sqlite:///test.db
        run: |
          pytest tests/unit/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=junit/unit-test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: junit/unit-test-results.xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: unit-coverage
          fail_ci_if_error: false

  # Integration tests - run for app code or test changes
  integration-tests:
    name: Integration Tests
    needs: [changes, setup-python]
    if: needs.changes.outputs.app_code == 'true' || needs.changes.outputs.tests == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: basketball_user
          POSTGRES_PASSWORD: basketball_pass
          POSTGRES_DB: basketball_stats
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download Python environment
        uses: actions/download-artifact@v4
        with:
          name: python-env

      - name: Restore Python environment
        run: |
          tar -xzf python-env.tar.gz
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://basketball_user:basketball_pass@localhost:5432/basketball_stats
          DEFAULT_ADMIN_PASSWORD: ci-test-admin-password-12345
        run: alembic upgrade head

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://basketball_user:basketball_pass@localhost:5432/basketball_stats
          JWT_SECRET_KEY: test-secret-key-for-ci-environment-12345678
          DEFAULT_ADMIN_PASSWORD: ci-test-admin-password-12345
        run: |
          pytest tests/integration/ \
            --ignore=tests/integration/test_ui_validation.py \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=junit/integration-test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: junit/integration-test-results.xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: integrationtests
          name: integration-coverage
          fail_ci_if_error: false

  # UI tests - run for frontend changes, app code changes, OR test changes
  ui-tests:
    name: UI Validation Tests
    needs: [changes, docker-build]
    if: needs.changes.outputs.app_code == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Download Docker image
        if: needs.docker-build.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        if: needs.docker-build.result == 'success'
        run: |
          docker load --input image.tar
          docker tag basketball-stats:pr-${{ github.event.pull_request.number }} basketball-stats:latest

      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          # Wait for services to be ready
          docker compose exec -T web bash -c "for i in {1..30}; do basketball-stats health-check && break || sleep 2; done"

      - name: Run database migrations
        env:
          DEFAULT_ADMIN_PASSWORD: TestAdminPassword123!
        run: |
          docker compose exec -T web alembic upgrade head

      - name: Run UI validation tests
        env:
          JWT_SECRET_KEY: test-secret-key-for-ci-environment-12345678
          DEFAULT_ADMIN_PASSWORD: TestAdminPassword123!
        run: |
          pytest tests/integration/test_ui_validation.py -v \
            --junitxml=junit/ui-test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: junit/ui-test-results.xml

      - name: Collect Docker logs on failure
        if: failure()
        run: docker compose logs > docker-compose-logs.txt

      - name: Upload Docker logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: docker-logs
          path: docker-compose-logs.txt

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Test results summary - always runs to report status
  test-results:
    name: Test Results Summary
    needs: [unit-tests, integration-tests, ui-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results'
          merge-multiple: true
          
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            junit/**/*.xml
            **/*-test-results.xml
          check_name: Test Results
          comment_title: Test Results Summary
          fail_on: test failures

  # Security scan - only if app code or docker changed
  security-scan:
    name: Security Scan
    needs: changes
    if: needs.changes.outputs.app_code == 'true' || needs.changes.outputs.docker == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # All checks passed - smart checking based on what ran
  all-checks:
    name: All Checks Passed
    needs: [changes, docker-build, code-quality, unit-tests, integration-tests, ui-tests, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check if all required jobs passed
        run: |
          # Check if any jobs that ran have failed
          failed=false
          
          # Only check jobs that actually ran based on changes
          if [[ "${{ needs.changes.outputs.app_code }}" == "true" ]]; then
            if [[ "${{ needs.code-quality.result }}" == "failure" ]] || \
               [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
              failed=true
            fi
          fi
          
          if [[ "${{ needs.changes.outputs.app_code }}" == "true" ]] || [[ "${{ needs.changes.outputs.tests }}" == "true" ]]; then
            if [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
               [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
              failed=true
            fi
          fi
          
          if [[ "${{ needs.changes.outputs.docker }}" == "true" ]] || [[ "${{ needs.changes.outputs.app_code }}" == "true" ]] || [[ "${{ needs.changes.outputs.frontend }}" == "true" ]]; then
            if [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
              failed=true
            fi
          fi
          
          if [[ "${{ needs.changes.outputs.frontend }}" == "true" ]] || [[ "${{ needs.changes.outputs.app_code }}" == "true" ]] || [[ "${{ needs.changes.outputs.tests }}" == "true" ]]; then
            if [[ "${{ needs.ui-tests.result }}" == "failure" ]]; then
              failed=true
            fi
          fi
          
          if [[ "$failed" == "true" ]]; then
            echo "One or more checks failed"
            exit 1
          else
            echo "All required checks passed successfully!"
          fi