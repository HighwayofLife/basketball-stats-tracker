name: PR Validation

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  # Build validation - ensures Docker image can be built
  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract version info
        id: version
        run: |
          VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          target: production
          build-args: |
            APP_VERSION=${{ steps.version.outputs.VERSION }}
            GIT_HASH=${{ steps.version.outputs.SHORT_SHA }}
          tags: basketball-stats:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run Ruff linter
        run: |
          echo "::group::Running Ruff linter"
          ruff check . --output-format=github
          echo "::endgroup::"
          
      - name: Check code formatting with Ruff
        run: |
          echo "::group::Checking code formatting"
          ruff format --check .
          echo "::endgroup::"

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          
      - name: Run unit tests with coverage
        env:
          JWT_SECRET_KEY: test-secret-key-for-ci-environment-12345678
        run: |
          pytest tests/unit/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=junit/unit-test-results.xml
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: junit/unit-test-results.xml
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: unit-coverage
          fail_ci_if_error: false

  # Integration tests (using Docker Compose)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: basketball_user
          POSTGRES_PASSWORD: basketball_pass
          POSTGRES_DB: basketball_stats
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://basketball_user:basketball_pass@localhost:5432/basketball_stats
          DEFAULT_ADMIN_PASSWORD: ci-test-admin-password-12345
        run: |
          alembic upgrade head
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://basketball_user:basketball_pass@localhost:5432/basketball_stats
          JWT_SECRET_KEY: test-secret-key-for-ci-environment-12345678
        run: |
          pytest tests/integration/ \
            --ignore=tests/integration/test_ui_validation.py \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=junit/integration-test-results.xml
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: junit/integration-test-results.xml
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: integrationtests
          name: integration-coverage
          fail_ci_if_error: false

  # UI validation tests (full stack with Docker Compose)
  ui-tests:
    name: UI Validation Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          
      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          # Wait for services to be ready
          docker compose exec -T web bash -c "for i in {1..30}; do basketball-stats health-check && break || sleep 2; done"
          
      - name: Run UI validation tests
        run: |
          pytest tests/integration/test_ui_validation.py -v \
            --junitxml=junit/ui-test-results.xml
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: junit/ui-test-results.xml
          
      - name: Collect Docker logs on failure
        if: failure()
        run: |
          docker compose logs > docker-compose-logs.txt
          
      - name: Upload Docker logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: docker-logs
          path: docker-compose-logs.txt
          
      - name: Stop services
        if: always()
        run: docker compose down -v

  # Test results summary
  test-results:
    name: Test Results Summary
    needs: [unit-tests, integration-tests, ui-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results'
          merge-multiple: true
          
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            junit/**/*.xml
          check_name: Test Results
          comment_title: Test Results Summary
          fail_on: test failures
          
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # All checks passed
  all-checks:
    name: All Checks Passed
    needs: [docker-build, code-quality, unit-tests, integration-tests, ui-tests, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check if all jobs passed
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more checks failed"
            exit 1
          else
            echo "All checks passed successfully!"
          fi