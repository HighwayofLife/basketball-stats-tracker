[build-system]
requires = ["setuptools>=77.0"]
build-backend = "setuptools.build_meta"

[project]
name = "basketball_stats_tracker"
version = "0.4.3"
description = "A simple web app for tracking basketball game statistics."
authors = [
  { name = "David 'Jedi' Lewis", email = "highwayoflife@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
license-files = ["LICENSE"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Framework :: Flask",
  "Framework :: SQLAlchemy",
  "Framework :: Pydantic",
]
keywords = [
  "basketball",
  "stats",
  "tracker",
  "webapp",
  "flask",
  "sqlalchemy",
  "pydantic",
]

dependencies = [
  "flask>=3.0,<4.0", # Web framework
  "uvicorn[standard]>=0.20.0,<0.35.0", # ASGI server for running the app
  "SQLAlchemy>=2.0.0,<3.0.0", # ORM for database interactions
  "alembic>=1.12.0,<2.0.0", # Database migration tool
  "pydantic>=2.0,<3.0", # Data validation
  "pydantic-settings>=2.0,<3.0", # For settings management
  "python-dotenv>=1.0,<2.0", # For loading environment variables from .env files
  "colorama>=0.4.0,<1.0.0", # For colored terminal output
  "emoji>=2.0,<3.0", # For emoji support
  "typer>=0.9.0,<1.0.0", # CLI framework
  "tabulate>=0.9.0,<1.0.0", # Table formatting for reports
  "types-tabulate>=0.9.0,<1.0.0", # Type stubs for tabulate
  "fastapi>=0.100.0", # Web framework for building APIs
  "jinja2>=3.1.2",
  "python-multipart>=0.0.20", # For file uploads
  "psycopg2-binary>=2.9.0", # PostgreSQL adapter
  "uvicorn>=0.23.0",
  "python-jose[cryptography]>=3.3.0", # JWT tokens
  "passlib[bcrypt]>=1.7.4", # Password hashing
  "email-validator>=2.0.0", # Email validation for Pydantic
  "authlib>=1.3.0", # OAuth 2.0 client library
  "httpx>=0.24.0", # HTTP client for OAuth requests
]

[project.optional-dependencies]

test = [
  "pytest>=8.0", # Testing framework
  "pytest-cov>=6.0", # Coverage reporting
  "pytest-asyncio>=0.20", # Async support for pytest
  "httpx>=0.24", # HTTP client for testing
  "pytest-httpx>=0.22", # Mocking HTTP requests in tests
  "pytest-mock>=3.10", # Mocking library for pytest
  "coverage>=7.2", # Code coverage tool
  "debugpy>=1.6", # Debugging tool
  "requests>=2.28.0", # HTTP requests for UI testing
  "beautifulsoup4>=4.11.0", # HTML parsing for UI validation
]

# Dev should inherit from test dependencies and install additional tools
dev = [
  "basketball_stats_tracker[test]",  # Include all test dependencies
  "ruff>=0.1.0", # Linter and formatter
  "pylint>=3.3", # Linter
  "black>=25.1", # Code formatter
  "mypy>=1.10", # Static type checker
  "autopep8>=2.0", # Code formatter
  "autopep695>=1.1", # Code formatter
]

# Build dependencies for creating standalone executables
build = [
  "pyinstaller>=6.0,<7.0", # For creating standalone executables
]

[tool.setuptools]
packages = ["app"]

[tool.pylint."MESSAGES CONTROL"]
disable = ["unnecessary-pass"]

# Configuration for Pylint, allow line length up to 120 characters
[tool.pylint]
max-line-length = 120
output-format = "colorized" # Use colorized output for better readability

# Configuration for Ruff (Linter and Formatter)
[tool.ruff]
line-length = 120
target-version = "py311" # Target the minimum Python version for compatibility checks

[tool.ruff.lint]
select = [ # Select rule codes to enable (Examples)
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes errors
    "I",  # isort import sorting
    "UP", # pyupgrade suggestions
    "B",  # flake8-bugbear findings
    "C4", # flake8-comprehensions
    "SIM",# flake8-simplify
]
ignore = [
    "B008", # B008: Function calls in argument defaults - valid for FastAPI Depends()
    "SIM117", # SIM117: Multiple with statements - sometimes clearer as nested
]
# fixable = ["ALL"] # Optionally enable auto-fixing for all possible rules

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "F841", # Local variable assigned but never used - common in tests for assertions
    "SIM117", # Multiple with statements - nested mocking is common in tests
]

[tool.ruff.format]
quote-style = "double" # Prefer double quotes
indent-style = "space"

[tool.autopep8]
max_line_length = 120
ignore = []

[tool.flake8]
max-line-length = 120 # Maximum line length for Flake8

[project.scripts]
basketball-stats = "app.cli:cli"

# Configuration for Black (Code Formatter)
[tool.black]
line-length = 120
target-version = ['py311'] # Target the minimum Python version

# Pytest configuration (migrated from pytest.ini)
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
cache_dir = ".pytest_cache"
addopts = "--no-header -v --color=yes"

[tool.alembic]
script_location = "migrations"
prepend_sys_path = "."
version_path_separator = "os"
sqlalchemy_url = "sqlite:///data/league_stats.db"
